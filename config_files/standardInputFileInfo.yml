# metdata for assorted file types, for the option to define how files are read in Pandas sed pdKwargs:
GHG:
  extension: ghg
  tstamp_end: False
  # Regex search for dates in filename
  search: '([0-9]{4}\-[0-9]{2}\-[0-9]{2}T[0-9]{6})'
  format: '%Y-%m-%dT%H%M%S'
  ep_date_pattern: yyyy-mm-ddTHHMM??
  pdKwargs:
    sep: "\t"
    na_values:
    - -9999
    skiprows: 6
    header: 1

TOA5:
  extension: dat
  tstamp_end: False
  search: ([0-9]{4}\_[0-9]{2}\_[0-9]{2}\_[0-9]{4})
  format: '%Y_%m_%d_%H%M'
  ep_date_pattern: yyyy_mm_dd_HHMM
  pdKwargs:
    sep: ','
    # Kwargs for reading data
    na_values: 
    - NAN
    # rows to skip (start count form 0)
    skiprows: [0]
    # header rows (after skiprows)
    header: [0,1,2]
  # Column(s) which contain timestamp information
  pdDateParse: 
    cols: [0]
    date_format: '%Y-%m-%d %H:%M:%S'
  unitParse: True

  
EddyPro_fluxnet:
  extension: csv
  pdKwargs:
    header: [0]
  pdDateParse: 
    cols: [0]
    date_format: '%Y%m%d%H%M'
     
EddyPro_biomet:
  extension: csv
  pdKwargs:
    header: [0,1]
  pdDateParse: 
    cols: [0,1]
    date_format: '%Y-%m-%d %H:%M'
    
EddyPro_full_output:
  extension: csv
  pdKwargs:
    header: [1,2]
    na_values: 
    - -9999
  pdDateParse: 
    cols: [1,2]
    date_format: '%Y-%m-%d %H:%M'
